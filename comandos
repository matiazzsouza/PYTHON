import os
import random
import json
import math
import mysql.connector
from mysql.connector import Error


def salvar(dados):
    with open('dados.json', 'w') as f:
        json.dump(dados, f)
        
# FORMA DE DEIXAR SALVO MESMO FECHANDO O CODIGO 

def carregar():
    try:
        with open('dados.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return []


def limpar_tela():
    # Para Windows
    if os.name == 'nt':
        os.system('cls')

	    total = list(map(int, total)) # transforma uma lista de numeros(str) em numeros(int)


    numale = random.randint(0 , 100)
	cores = ("vermelho", "verde", "azul", "amarelo")
	cor_aleatoria = random.choice(cores)

	print(cor_aleatoria) 

    print(f"{'Valor inicial:':<30} R$ {conta_inicial:>7.2f}")  #COMANDO PARA DEIXAR OS VALORES TUDO NA MESMA COLUNA


    resultado = math.sqrt(total)  #EXEMPLO DE COMO USAR IMPORT MATH

        print(f"\t\tOLÁ SEJA BEM-VINDO {name.upper()}") #DEIXA A LETRA MAIUSCULA 


    #tipos de try e except 

        # Try / Except genérico
    try:
        # código
    except:
        # tratamento genérico

    # Try / Except com tipo específico
    try:
        # código
    except ValueError:
        # tratamento para ValueError

    # Try / Except com múltiplos tipos de erro
    try:
        # código
    except ZeroDivisionError:
        # tratamento para ZeroDivisionError
    except ValueError:
        # tratamento para ValueError

    # Try / Except com múltiplos erros no mesmo bloco
    try:
        # código
    except (ValueError, TypeError):
        # tratamento comum para múltiplos erros

    # Try / Except / Else
    try:
        # código
    except Exception:
        # tratamento
    else:
        # executado se não houve erro

    # Try / Except / Finally
    try:
        # código
    except Exception:
        # tratamento
    finally:
        # sempre executado

    # Try / Except com variável de erro
    try:
        # código
    except ValueError as e:
        print("Erro:", e)

    # Try com exceção personalizada
    class ErroPersonalizado(Exception):
        pass

    try:
        raise ErroPersonalizado("Mensagem de erro")
    except ErroPersonalizado as e:
        print("Erro personalizado:", e)

